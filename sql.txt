

CREATE DATABASE `SCOTT` DEFAULT CHARACTER SET utf8mb4;

USE SCOTT;

CREATE TABLE IF NOT EXISTS `BONUS` ( 
`ENAME` varchar(10) DEFAULT NULL,
`JOB` varchar(9) DEFAULT NULL,
`SAL` double DEFAULT NULL,
`COMM` double DEFAULT NULL);
SELECT*from Bonus;
drop table IF EXISTS dept;

CREATE TABLE IF NOT EXISTS `DEPT` ( 
`DEPTNO` int(11) NOT NULL,
`DNAME` varchar(14) DEFAULT NULL,
`LOC` varchar(13) DEFAULT NULL,
PRIMARY KEY (`DEPTNO`));
SELECT*FROM DEPT;

INSERT INTO `DEPT` (`DEPTNO`,`DNAME`,`LOC`)
VALUES(10, 'ACCOUNTING', 'NEW YORK'),
	  (20, 'RESEARCH', 'DALLAS'),
      (30, 'SALES', 'CHICAGO'),
      (40, 'OPERATIONS', 'BOSTON');

CREATE TABLE IF NOT EXISTS `EMP` ( 
`EMPNO` int(11) NOT NULL,
`ENAME` varchar(10) DEFAULT NULL,
`JOB` varchar(9) DEFAULT NULL,
`MGR` int(11) DEFAULT NULL,
`HIREDATE` datetime DEFAULT NULL,
`SAL` double DEFAULT NULL,
`COMM` double DEFAULT NULL,
`DEPTNO` int(11) DEFAULT NULL,
PRIMARY KEY (`EMPNO`),
KEY `PK_EMP` (`DEPTNO`));

INSERT INTO	`EMP` ( `EMPNO`, `ENAME`, `JOB`, `MGR`, `HIREDATE`, `SAL`, `COMM`, `DEPTNO`)
VALUES 
       (7839, 'KING', 'PRESIDENT', NULL, '1981-11-17 00:00:00', 5000, NULL, 10),
       (7782, 'CLARK', 'MANAGER', 7839, '1981-06-09 00:00:00', 2450, NULL, 10),
       (7934, 'MILLER', 'CLERK', 7782, '1982-01-23 00:00:00', 1300, NULL, 10),
       (7566, 'JONES', 'MANAGER', 7839, '1981-04-02 00:00:00', 2975, NULL, 20),
       (7788, 'SCOTT', 'ANALYST', 7566, '1987-04-19 00:00:00', 3000, NULL, 20),
       (7876, 'ADAMS', 'CLERK', 7788, '1987-05-23 00:00:00', 1100, NULL, 20),
       (7902, 'FORD', 'ANALYST', 7566, '1981-12-03 00:00:00', 3000, NULL, 20),
       (7369, 'SMITH', 'CLERK', 7902, '1980-12-17 00:00:00', 800, NULL, 20),
       (7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01 00:00:00', 2850, NULL, 30),
       (7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-20 00:00:00', 1600, 300, 30),
       (7521, 'WARD', 'SALESMAN', 7698, '1981-02-22 00:00:00', 1250, 500, 30),
	   (7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-28 00:00:00', 1250, 1400, 30),
       (7844, 'TURNER', 'SALESMAN', 7698, '1981-09-08 00:00:00', 1500, 0, 30),
       (7900, 'JAMES', 'CLERK', 7698, '1981-12-03 00:00:00', 950, NULL, 30);
       
select*from EMP;

CREATE TABLE IF NOT EXISTS `SALGRADE` ( 
`GRADE` double DEFAULT NULL,
`LOSAL` double DEFAULT NULL,
`HISAL` double DEFAULT NULL);

INSERT INTO `SALGRADE` (`GRADE`, `LOSAL`, `HISAL`)
VALUES (1, 700, 1200),
       (2, 1201, 1400),
	   (3, 1401, 2000),
       (4, 2001, 3000),
       (5, 3001, 9999);

select*from SALGRADE;
ALTER TABLE `EMP` ADD CONSTRAINT `PK_EMP` FOREIGN KEY (`DEPTNO`) REFERENCES `DEPT` (`DEPTNO`) ON
DELETE SET NULL ON UPDATE CASCADE;


select distinct deptno as '부서번호' from emp;

select ename 이름, empno as '사번', comm 커미션 , sal as 급여, sal+ IFNULL(comm,0) as"커미션 포함급여2"
from emp;

-- case function 써보자
select empno, ename, sal,
	case when sal >= 5000 then "고액연봉"
		when sal >= 2000 then "평균연봉"
        else "지역연봉"
	end as "연봉등급"
from emp ;

-- 부서 번호가 30인 사원중 급여가 1500 이상인 사원의이름, 급여, 부서번호 조회
select ename, sal, deptno
from emp
where deptno = 30 and sal >= 1500;

select empno, ename, deptno from emp
where Not (deptno = 30 OR deptno = 20);

-- 업무가 manager, analyst, president 인 사원의 이름, 사번, 업무 조회 

select ename, empno, job 
from emp
where job in('manager','analyst','president');

-- 부서 번호가 10,20이 아닌 사원의 사번, 이름, 부서번호
select empno, ename, deptno
from emp
where deptno not in(10,20);

-- 급여가 2000이상 3000이하인 사람의 사번, 이름, 급여조희
select empno, ename, sal 
from emp
where sal between 2000 and 3000;

-- 입사일이 1981년인 직원으 ㅣ사번, 이름, 입사일 조회
select empno, ename, hiredate
from emp
where hiredate between '1981-01-01' and '1981-12-31';
-- 이름이 'A' , 'B' , 'C' 로 시작하는 직원의 사번, 이름조회
select empno, ename
from emp 
where ename>'D';  -- 이렇게 하면 되는 구나 ,betwwen 
-- 커미션인 NULL 인사원의 사번, 이름, 커미션 조회
select empno, ename, comm 
from emp
where comm is null;

-- 이름이 M으로 시작하는 사원의 사번, 이름 조회 
select empno, ename
from emp
where ename like 'M%';

-- 이름에 E 포함
select empno, ename
from emp
where ename like '%E%';

-- 이름의 세번째 알파벳이 'A' 인 사원의 사번, 이름 조회
select empno, ename
from emp
where ename like '__A%';

select * from emp
order by ename desc;
-- 급여 내림차순
select empno, ename, sal
from emp
order by sal DESC;


-- 20, 30번 부서에 근무하는 사원의 사번, 이름, 부서번호, 급여 조회 (부서별 오름차순, 급여순 내림차순) 
select empno , ename, deptno, sal
from emp
where deptno IN(20,30)
order by deptno, sal desc;

-- -------------MYSQL 내장함수--------------
-- 2의 3제곱 
select POW(2,3);
-- 임시 테이블 사용
select POW(2,3) from dual;

-- 8나누기 3의 나머지
select mod(8,3) as "8을 3으로 나눈 나머지";
-- 최대값 , 최소값
select greatest(8,17,25,33,192,55,159) , least(99999,433,21,3232,44);

-- 반올림
select round(1526.159), round(1526.159,1);


-- MYSQL Function 쓰자 

-- 아스키 코드값 얻기
select ascii('0'),ascii('A') ,ascii('a');

-- concat 메서드를 써보자 
select concat('president의 이름은',ename, '입니다') as '소개'
from emp
where job ='president';

-- 이름의 길이가 5인 직원의 이름을 조회
select ename
from emp
where length(ename) = 5;

-- 김싸피
select length('김싸피'),char_length('김싸피');

select length('😜') , char_length('💖');

-- 문자열 변경
select replace('Hello abc abc','abc','ssafy');

-- 문자열 인덱스
select instr('hello ssafy','ssafy');
-- 모든 직원의 이름 3자리 조회 
select substr(ename, 1, 3)
from emp;

-- LPAD RPAD
select lpad('SSAFY',10,'*') , rpad('SSAFY',10,'*');
-- REVERSE

select reverse('hello SSAFY!');
select reverse('우영우역삼역기러기인도인토마토별똥별스위스');

-- 모든 사원에 대하여 사원수, 급여총액, 평균급여 , 최고급여, 최저급여 조회 

-- 부서별로 조회하고, 
select deptno 부서, job 업무,count(*) 사원수, sum(sal) 급여총액, ROUND(avg(sal),2) 평균급여, max(sal) 최고급여, min(sal) 최저급여
from emp
group by deptno,job
order by deptno;


-- 급여 (커미션 포함) 평균이 2000 이상인 부서번호, 부서별 사원수, 평균급여(커미션 포함) 조회
select deptno, COUNT(*) 사원수 , ROUND(AVG(sal+IFNULL(comm, 0)),2)  "평균급여(커미션 포함)"
from emp
group by deptno
having AVg(sal+ IFNULL(comm ,0)) >= 2000;


select*
from emp
order by deptno
limit 5;

-- 오토커밋 나 안할래 
set autocommit = 0;

create database ssafy_pjt;

use ssafy_pjt;
drop table usertable;
create table usertable (
	idx int auto_increment primary key,
    userId varchar(30) character set utf8mb4 not null,
    `password` varchar(30) character set utf8mb4 not null,
    name varchar(30) character set utf8mb4 not null,
    nickname varchar(30) character set utf8mb4 ,
    email varchar(50) ,
    createtime timestamp default now()
);

insert into usertable (userId, password, name, nickname,email)
values ("aaa","1234","dhdhdh","hohoho","aaaa@aaaa.com"),
("abb","12345","dhdhdh","hohoho","aaaa@aaaa.com"),
("aac","12346","dhdhdh","hohoho","aaaa@aaaa.com")
;
insert usertable (userId, password, name, nickname,email)
values ("가가가가가가가가가가가가가가가가가가가가가가가가가가가가","1234","dhdhdh","hohoho","aaaa@aaaa.com");
select*from usertable;

select*from usertable where userId = 'yyyyyyyyyyyy' and password='yyyyyyyyyyyyyyyy';

-- board table
create table boardtable (
	idx int auto_increment primary key,
    boardId varchar(50) character set utf8mb4 not null,
    title varchar(50) character set utf8mb4 not null,
    content varchar(200) character set utf8mb4,
    writerIdx int ,
    part varchar(10) character set utf8mb4 not null,
    channelName varchar(50) character set utf8mb4 ,
    url varchar(300) ,
    createtime timestamp default now(),
    foreign key (writerIdx) references usertable(idx)
);
drop table boardtable;
select*from boardtable;
insert into boardtable (boardId, title, content,writerIdx,part,channelName,url)
values ("aaaff","호우호우","어푸어푸",15,"전신","땅크부부","youtube.com");

-- comment table
create table reviewtable(
	idx int auto_increment primary key,
    title varchar(50) character set utf8mb4 not null,
    content varchar(200) character set utf8mb4 ,
    boardIdx int ,
    writerIdx int,
    views int default 0,
    createtime timestamp default now(),
    foreign key(boardIdx) references boardtable(idx),
    foreign key(writerIdx) references usertable(idx)
);

select*from reviewtable;
insert into reviewtable ( title, content,boardIdx,writerIdx)
values ("휘리릭","클레릭",2,3);

